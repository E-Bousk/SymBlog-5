# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.sender_email: '%env(MAILER_SENDER_EMAIL)%'
    app.sender_name: '%env(MAILER_SENDER_NAME)%'
    app.hcaptcha_secret_key: '%env(HCAPTCHA_SECRET_KEY)%'
    app.discord_client_id: '%env(DISCORD_CLIENT_ID)%'
    app.discord_client_secret: '%env(DISCORD_CLIENT_SECRET)%'
    app.supported_locales: 'en|fr'
    app.default_locale: '%kernel.default_locale%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        # Add a variable to set the uploads directory
        bind:
            string $uploadsDirectory: '%kernel.project_dir%/public/uploads/'
            string $dataDirectory: '%kernel.project_dir%/public/data/'
            string $maintenanceON: '%kernel.project_dir%/public/.maintenance-ON'
            string $projectDirectory:  '%kernel.project_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\UserPasswordEncoderEntityListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'prePersist', entity: 'App\Entity\User' }
            - { name: 'doctrine.orm.entity_listener', event: 'preUpdate', entity: 'App\Entity\User' }

    App\EventListener\ArticleEntityListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'prePersist', entity: 'App\Entity\Article' }
            - { name: 'doctrine.orm.entity_listener', event: 'preUpdate', entity: 'App\Entity\Article' }

    Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider: ~

    App\Service\SendEmail:
        arguments:
            $senderEmail: '%app.sender_email%'
            $senderName: '%app.sender_name%'
    
    # pour 'autowiring' le service 'session' avec la variable '$session' dans la classe 'UserAccountAreaController'
    App\Controller\UserAccountAreaController:
        arguments:
            $session: '@session'

    # pour 'autowiring' le service 'session' avec la variable '$session' dans la classe 'AskForPasswordConfirmationSubscriber'
    App\EventSubscriber\AskForPasswordConfirmationSubscriber:
        arguments:
            $session: '@session'
    
    App\Service\Hcaptcha:
        arguments:
            $hcaptchaSecretKey: '%app.hcaptcha_secret_key%'
    
    App\Security\DiscordUserProvider:
        arguments:
            $discordClientId: '%app.discord_client_id%'
            $discordClientSecret: '%app.discord_client_secret%'

    App\ParamConverter\ArticleConverter:
        tags:
            - { name: request.param_converter, converter: ArticleConverter }
